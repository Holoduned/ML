import itertools
import random

def path_bruteforce(distance_matrix):

    n = len(distance_matrix)
    cities = range(n)
    min_path = 0
    min_cost = float('inf')

    for perm in itertools.permutations(cities[1:]):

        route = [0] + list(perm) + [0]
        cost = sum(distance_matrix[route[i]][route[i+1]] for i in range(len(route) - 1))

        if cost < min_cost:
            min_cost = cost
            min_path = route

    return min_path, min_cost

def path_genetic(distance_matrix, population_size=100, generations=500, mutation_rate=0.1):

    n = len(distance_matrix)

    def calculate_cost(route):
        return sum(distance_matrix[route[i]][route[i+1]] for i in range(len(route) - 1))

    def create_path():
        route = list(range(1, n))
        random.shuffle(route)
        return [0] + route + [0]

    def mutate(path):
        if random.random() < mutation_rate:
            i, j = random.sample(range(1, n), 2)
            path[i], path[j] = path[j], path[i]

    def create_child(parent1, parent2):
        start, end = sorted(random.sample(range(1, n), 2))
        child = [None] * len(parent1)
        child[0] = child[-1] = 0
        child[start:end] = parent1[start:end]

        pointer = 1
        for city in parent2:
            if city not in child:
                while child[pointer] is not None:
                    pointer += 1
                child[pointer] = city

        return child


    population = [create_path() for _ in range(population_size)]

    for _ in range(generations):

        population.sort(key=calculate_cost)

        new_population = population[:population_size // 2]

        while len(new_population) < population_size:
            parent1, parent2 = random.sample(new_population, 2)
            child = create_child(parent1, parent2)
            mutate(child)
            new_population.append(child)

        population = new_population

    best_route = min(population, key=calculate_cost)
    return best_route, calculate_cost(best_route)

if __name__ == "__main__":
    distance_matrix = [
        [0, 10, 15, 25],
        [10, 0, 20, 35],
        [15, 20, 0, 30],
        [25, 35, 30, 0],
    ]

    shortest_path, shortest_cost = path_bruteforce(distance_matrix)
    print(f"Кратчайший маршрут (полный перебор): {shortest_path}")
    print(f"Длина: {shortest_cost}")

    ga_path, ga_cost = path_genetic(distance_matrix)
    print(f"Кратчайший маршрут (генетический): {ga_path}")
    print(f"Длина: {ga_cost}")
